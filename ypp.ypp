%{
#include "hpp.hpp"
%}
%defines %union { Sym*o; }
%token <o> SYM
%token <o> LQ RQ
%token <o> EQ COLON AT
%token <o> ADD
%type <o> ex vector
%%
REPL : | REPL ex {
	 					cout << $2->dump() << endl;
						cout << "--------------------------------";
	 					cout << $2->eval(&glob)->dump() << endl;
						cout << "================================" << endl; } ;
ex : SYM
	| LQ vector RQ		{ $$=$2; }
	| ex EQ ex			{ $$=$2; $$->push($1); $$->push($3); }
	| ex AT ex			{ $$=$2; $$->push($1); $$->push($3); }
	| ex ADD ex			{ $$=$2; $$->push($1); $$->push($3); }
;
vector :					{ $$=new Vector(); }
	| vector ex				{ $$=$1; $$->push($2); }
	| vector ex COLON ex	{ $$=$1; $$->sel[$2->val]=$4; }
;
